// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Creator profiles and public information
model CreatorProfile {
  id                String           @id @default(cuid())
  displayName       String
  primaryHandle     String           @unique
  profileImage      String?
  verificationStatus VerificationStatus
  meshStrength      Int             @default(0)
  trustScore        Float           @default(0)
  isPublic          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  lastActiveAt      DateTime        @updatedAt
  socialAccounts    SocialAccount[]
  publicFlags       PublicFlag[]
  trustedContacts   TrustedContact[]
  activityLogs      ActivityLog[]
  notifications     Notification[]

  @@index([primaryHandle])
}

// Social media accounts linked to creators
model SocialAccount {
  id                String           @id @default(cuid())
  creatorId         String
  creator           CreatorProfile   @relation(fields: [creatorId], references: [id])
  platform          Platform
  handle            String
  followerCount     Int?
  verificationStatus VerificationStatus
  lastChecked       DateTime
  isConnected       Boolean          @default(false)

  @@unique([platform, handle])
  @@index([creatorId])
}

// Public flags and reports
model PublicFlag {
  id              String           @id @default(cuid())
  creatorId       String
  creator         CreatorProfile   @relation(fields: [creatorId], references: [id])
  reporterName    String?
  reporterContact String?
  activityType    String
  platform        Platform
  evidenceLinks   Json?           // Array of URLs
  evidenceImages  Json?           // Array of image URLs
  description     String
  urgencyLevel    UrgencyLevel
  status          FlagStatus      @default(NEW)
  createdAt       DateTime        @default(now())
  resolvedAt      DateTime?
  resolvedBy      String?         // Reference to TrustedContact
  notifications   Notification[]

  @@index([creatorId])
  @@index([status])
}

// Trusted contacts with verification powers
model TrustedContact {
  id                String           @id @default(cuid())
  creatorId         String
  creator           CreatorProfile   @relation(fields: [creatorId], references: [id])
  name              String
  email             String
  verificationPower VerificationPower
  responseRate      Float            @default(0)
  joinedMeshAt      DateTime         @default(now())
  activityLogs      ActivityLog[]

  @@index([creatorId])
}

// Activity log for all events
model ActivityLog {
  id              String           @id @default(cuid())
  creatorId       String
  creator         CreatorProfile   @relation(fields: [creatorId], references: [id])
  contactId       String?
  contact         TrustedContact?  @relation(fields: [contactId], references: [id])
  eventType       EventType
  timestamp       DateTime         @default(now())
  details         Json?
  isPublic        Boolean          @default(false)

  @@index([creatorId])
  @@index([eventType])
}

// Notifications for both mesh and public
model Notification {
  id              String           @id @default(cuid())
  creatorId       String
  creator         CreatorProfile   @relation(fields: [creatorId], references: [id])
  publicFlagId    String?
  publicFlag      PublicFlag?      @relation(fields: [publicFlagId], references: [id])
  type            NotificationType
  message         String
  isPublic        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  readAt          DateTime?

  @@index([creatorId])
  @@index([publicFlagId])
}

// Enums
enum VerificationStatus {
  VERIFIED_SAFE
  UNDER_REVIEW
  COMPROMISED
  UNPROTECTED
}

enum Platform {
  TWITTER
  YOUTUBE
  DISCORD
  INSTAGRAM
  TIKTOK
}

enum UrgencyLevel {
  IMMEDIATE
  SOON
  WHEN_CONVENIENT
}

enum FlagStatus {
  NEW
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum VerificationPower {
  CAN_CHANGE_STATUS
  CAN_VOTE_ONLY
}

enum EventType {
  PUBLIC_FLAG_RECEIVED
  COMMUNITY_SEARCH_PERFORMED
  STATUS_CHANGED_BY_MESH
  PUBLIC_PROFILE_VIEWED
  EVIDENCE_SUBMITTED
  MESH_MEMBER_JOINED
  MESH_MEMBER_LEFT
  PLATFORM_CONNECTED
  PLATFORM_DISCONNECTED
  VERIFICATION_COMPLETED
  FLAG_RESOLVED
}

enum NotificationType {
  MESH_ALERT
  PUBLIC_FLAG
  STATUS_CHANGE
  MESH_UPDATE
  EVIDENCE_UPDATE
} 